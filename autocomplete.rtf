{\rtf1\ansi\ansicpg1252\cocoartf1138
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22020\viewh15660\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 We would like to have autocomplete as a module that can be reused everywhere.\
Currently we are envisioning 4 major different scenarios for autocomplete.\
1. Search. Autocomplete results are separated into 4 different categories, each category is placed under its own heading (we display 3 results for each category, a total of 12 at most)\
2. super sort (as it is now)\
3. Autocomplete for posts (Google Plus style) with tokens that are incorporated into a text box. This one also has a link to add new entries (like +Add circles in google plus)\
4. Autocomplete for everything else (Google Plus style) with tokens and no link.\
\
The module should be highly customizable and easy to extend. For example, we might want to select colors. Autocomplete should allow tokens to have different color, and results to also have different color (as in current autocomplete script we had before).\
\
We would like Autocomplete to provide results in both image/text and text only format. Image/text is an avatar with text to its right.\
\
\
Here is a list of attributes: \
\
0. urlOrData: [string]. The url to send autocomplete query to fetch results from. Cannot be null. Or a JSON string of data in the [\{id: 2, name: dmitry\},\{id: 3, name:ray\}] format. Additional parameters should be tolerated. One additional parameter is type (for custom results such as search results, where a result row can be a heading or a normal entry. This is specified by 'type')\
for example: JSON: [\{id: -1, name: friends, type: heading\},\{id: 1, name: kenzi, type: normal]\}) If type is not specified, 'normal' is assumed by default. also, extra parameters can be added, such as 'extra1', 'extra2', 'extra3'. And custom html can be added to autocomplete in the js code to format it properly. Such as avatar url. That would be provided from the server by 'extra1' parameter.\
THIS IS A REQURED PARAMETER\
1. queryParam: [string] the parameter name (that you see in autocomplete GET request as '?q='.) Default should be 'q'\
2. hintText: [string] text for hint that shows in the drop down box before you type anything. Default is: "Type in a search term". If not set, do not display drop down with hint text at all. (not set means null)\
3. noResultsText: [string] text for when no results are found. Default is: 'No Results'. If not set, do not display drop down with this text at all. (not set means null)\
4. searching text: [string] text for searches that take long time. If set to null, do not display drop down with this text. Default is: 'Searching\'85'\
5. animateDropdown: [boolean]. If true, then drop down with search results is animated (sliding down). Default is true.\
6. tokenLimit: [integer]. This specifies the maximum number of tokens that user can enter into a text box. If set to null, then unlimited. Default is: null\
7. tokenDelimiter: [string]. the character that separates two or more tokens in case of multiple entries in the text box. This is what is sent to server. If set to null, then send JSON instead. Default is: null\
8. preventDuplicates: [boolean]. Specifies whether duplicate tokens are allowed. If true, then tokens with same ID are allowed. Default is: false\
9. redirectOnClick: [boolean]. Specifies if entry in the result list is clicked upon, it does not add a token. instead it redirects to the url provided in the link in the result. Default is: false\
10. type: [string]. If type is avatar, then display avatar and text. Otherwise, display only text. If type is search, then display heading and results. The type of result entry is determined by the .type attribute of the row returned from server. If that is 'heading', display formatted heading (category of result, like in search results we have 4 different categories. Heading is formatted differently from the rest of results.\
example for search type:\
	Your friends: [formatted as heading]\
		Jack S\
		Dmitry K\
		Anne R\
	Other people: [formatted as heading]\
		Kenzi W.\
		Chris M\
	Your Interests: [formatted as heading]\
		Biking\
		Hiking\
	Other Interests: [formatted as heading]\
		Basket Weaving\
		Driving\
(please be aware that row type is different from autocomplete type. the attribute specified in point 10 is autocomplete type for entire input item. row type is a sub attribute that can be provided with each search entry, along with id and name. JSON: [\{id: -1, name: friends, type: heading\},\{id: 1, name: kenzi, type: normal]\}). Other params to use are: extra2, extra3. extra2 = url to the  avatar image source. extra3 = url that user gets redirected to on click. The redirectOnClick needs to be set to true for links to work.\
make sure that css lass selectors are provided so that heading can be styled with css.\
11. bottomText [string]. The special row at the bottom of results list for actions like 'Add interest', or 'see more'. If set to null, do not display that row. Default is: null\
12. allowInsert: [boolean]. If set to true, allow insertion of new tokens that do not exist in results. Default is: false\
13. placeholderText: [string]. text to display in the text box if inactive. When clicked anywhere in textbox, this text should disappear and show text cursor and focus. If not set, do not show anything. Default is: null\
14. invokerText: [string]. text to display in text box that if clicked upon, opens a result menu with pre-populated entries. if null, then no placeholder text displayed in text box. Default is: null\
15. prePopulated: [string in JSON format]. The JSON array of entries to populate the text box. Each JSON entry will be in its own token. Default is: null\
16. theme: [string]. The theme for css. All classnames for formatting autocomplete features will have -theme suffix. For example: if theme is 'fantoon'. Then all css selectors used by autocomplete will be like 'autocomplete-fantoon'. Default is: 'fantoon'\
\
//below attributes are callback functions\
17.  onResult: executes as soon as result is available. Default is: null\
18. onAdd: executes once a new token is inserted to text box (either from result or newly typed one). Default is: null\
19. onDelete: executes once a token is deleted from text box. Default is: null\
\
Things to note. All entries expected from server should be in JSON format\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 search JSON: [\{id: -1, name: friends, type: heading\},\{id: 101, name: kenzi, type: normal, extra2: '/images/kenzi.png', extra3: '/users/101]\})\
simple JSON: [\{id: 101, name: Kenzi\},\{id: 102, name: Ray\},\{id: 103, name: Dmitry\}]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\
Use our old autocomplete script as an example.\
The new autocomplete should be very customizable (as seen from sheer number of attributes above)\
\
It should be possible to clear autocomplete tokens/input data programmatically, as well as adding/deleting tokens programmatically (as in old autocomplete script)\
\
Feel free to add your own attributes.\
\
\
For more motivational examples please look at Google Plus post circles text box. They have token for each circle you want to post in. Another example is Facebook messaging. When composing a new message, you can add users as tokens and using autocomplete to select users to add. Each token should have an x on the right side to allow it to be deleted.\
\
}